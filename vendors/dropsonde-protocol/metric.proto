syntax = "proto2";

package events;

option go_package = "github.com/cloudfoundry/sonde-go/events";

option java_package = "org.cloudfoundry.dropsonde.events";
option java_outer_classname = "MetricFactory";

// A ValueMetric indicates the value of a metric at an instant in time.
message ValueMetric {
    // Name of the metric. Must be consistent for downstream consumers to
    // associate events semantically.
    required string name = 1;

    // Value at the time of event emission.
    required double value = 2;

    // Unit of the metric. Please see http://metrics20.org/spec/#units for
    // ideas; SI units/prefixes are recommended where applicable. Should be
    // consistent for the life of the metric (consumers are expected to report,
    // but not interpret, prefixes).
    required string unit = 3;
}

// A CounterEvent represents the increment of a counter. It contains only the
// change in the value; it is the responsibility of downstream consumers to
// maintain the value of the counter.
message CounterEvent {
    // Name of the counter. Must be consistent for downstream consumers to
    // associate events semantically.
    required string name = 1;

    // Amount by which to increment the counter.
    required uint64 delta = 2;

    // Total value of the counter. This will be overridden by Metron, which
    // internally tracks the total of each named Counter it receives.
    optional uint64 total = 3;
}

// A ContainerMetric records resource usage of an app in a container.
 message ContainerMetric {
     // ID of the contained application.
    required string applicationId = 1;

    // Instance index of the contained application. (This, with applicationId,
    // should uniquely identify a container.)
    required int32 instanceIndex = 2;

    // CPU based on number of cores.
    required double cpuPercentage = 3;

    // Bytes of memory used.
    required uint64 memoryBytes = 4;

    // Bytes of disk used.
    required uint64 diskBytes = 5;

    // Maximum bytes of memory allocated to container.
    optional uint64 memoryBytesQuota = 6;

    // Maximum bytes of disk allocated to container.
    optional uint64 diskBytesQuota = 7;
 }
